<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas  xmlns:mx="http://www.adobe.com/2006/mxml" initialize="init()" width="100%" height="100%"  xmlns:geom="flash.geom.*" xmlns:display="flash.display.*" xmlns:Controls="Controls.*" verticalScrollPolicy="off" horizontalScrollPolicy="off">
	<mx:VBox width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		
			<mx:HBox x="0" y="0" width="100%" height="25" verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<mx:Button label="Add" id="add_btn" selected="false" click="mode = 'addPoints';"/>
				<mx:Button label="Move" id="move_btn" selected="false" click="mode = 'movePoints';"/>
				<mx:Button label="Delete" id="delete_btn" selected="false" click="mode = 'deletePoints';"/>
				<mx:Label width="60"/>
				<mx:Button label="Snap" id="snap_btn" click="toggleSnapping(event)"/>
				<mx:Button label="Centre" id="centre_btn" click="focusPoly(event)"/>
				<mx:Button label="-" id="zoomOut_btn" click="zoomOut(event)"/>
				<mx:Button label="100%" id="zoom100_btn" click="zoom100(event)"/>
				<mx:Button label="+" id="zoomIn_btn" click="zoomIn(event)"/>
			</mx:HBox>
			
			<mx:VBox verticalScrollPolicy="off" horizontalScrollPolicy="off">
				<mx:Canvas  click="imagesPClick(event)" id="imagesP" width="710"  height="518"  clipContent="true" backgroundColor="#EEEEEE" borderColor="#666666" borderStyle="solid" verticalScrollPolicy="auto" horizontalScrollPolicy="auto">
						<mx:Image id="squat" alpha="0.01" width="700" height="510" source="@Embed('../bin/lib/backgrounds/squatBackground.png')"  />
						<mx:Image id="background"  alpha="1"/>
						<mx:Image id="content" alpha=".8" />
			
						
				</mx:Canvas>
			</mx:VBox>
 
	</mx:VBox>
	
	<mx:Script>
	<![CDATA[
		import mx.events.SliderEvent;
		import mx.controls.VScrollBar;
		import mx.controls.HScrollBar;
		//690 500
		import mx.core.UIComponent;
		import flash.display.MovieClip;
		import mx.controls.Image;
		import mx.controls.Button;
		public var scale:Number =1;
			public var scRect:Rectangle; 
			public var bg_mc:MovieClip;
			public var image_mc:MovieClip;			
			private var _poly:Array;
			private var _mode:String;
			private var _background:String;
			private var _map:String;
			private var _mapMode:String = "roomPoly";
			private var _snapToGrid:Number;
			
			private var _alerts:Array;
			private var _doors:Array;
			
			private var __width:Number;
			private var __height:Number;
		
			/* Getters and Setters */
			public function yVal():int {
				var i:int = (images.height - scRect.height) * images.percentHeight;
				return i;
			}
			public function xVal():int {
				var j:int = (images.width - scRect.width) * images.percentWidth;
				return j;
			}
			
			public function set poly(poly_str:String):void {
				if (poly_str.split(",").length > 1) {
					_poly = poly_str.split(",");
				} else {
					_poly = new Array();
				}
				
				drawPoly();
				
				if (_mapMode == "roomPoly") drawHandles();
			}
			
			public function get poly():String {
				return _poly.join(",");
			}
			
			public function set alerts(alerts:Array):void {
				_alerts = alerts;
				
				drawAlerts();
			}
			
			public function get alerts():Array {
				return _alerts;
			}
			
			public function set doors(doors:Array):void {
				_doors = doors;
				
				drawDoors();
			}
			
			public function get doors():Array {
				return _doors;
			}	
			
			public function set backgroundName(bgName:String):void {
				_background = bgName;
				backgroundLdr = bgName;
			}
			public function get backgroundName():String {
				return _background;
			}
							
			public function set mapName(url:String):void {
				_map = url;
				map = url;
			}
			public  function get mapName():String {
				return _map;
			}
		
			public function set mode(mode:String):void {
				add_btn.selected = move_btn.selected = delete_btn.selected = false;
				switch (mode) {
					case "addPoints":
						add_btn.selected = true;
						break;
					case "movePoints":
						move_btn.selected = true;
						break;
					case "deletePoints":
						delete_btn.selected = true;
						break;			
				}
				_mode = mode;
			}
		
			public function get mode():String {
				return _mode;
			}
			
			public function set snap(snap:Boolean):void {
				if (snap) {
					_snapToGrid = 3;
				} else {
					_snapToGrid = 1;
				}
				snap_btn.selected = snap;
			}
			
			public function set mapMode(mapMode:String):void {
				_mapMode = mapMode;
			}
			
			public function get mapMode():String {
				return _mapMode;
			}
			
			override public function set width(lwidth:Number):void {
				super.width = lwidth;
				setSize(lwidth, null);
			}
		
			override public function get width():Number {
				return __width;
			}
		  
			override public function set height(lheight:Number):void {
				super.height = lheight;
				setSize(null, lheight);
			}
		
			override public function get height():Number {
				return __height;
			}  
				
			/* Public functions */
			
			public function setSize(w:Number, h:Number):void {
				scaleX = 1;
				scaleY = 1;
				__width = w;
				__height = h;
				
			//	images.setActualSize(__width, __height);
				
			}
			
			private function onCreationComplete():void 
            { 
               // images.addChild(background); 
              //  images.addChild(content);
              	scRect = new Rectangle(0,0,640,480);
              	images.scrollRect = scRect;
              	
            } 

			
			
			public function backImgLoaded(event:Event):void	{
				
				var num:int = background.numChildren;
				for (var i:int=num-1;i>=0;i--) {
					background.removeChildAt(i);
				}
				var newDo:DisplayObject = event.target.content;
				newDo.width = 680;
				newDo.height = 480;
				
				background.addChild(newDo);
				//if (content) {
				//	background.width = content.width + 20;
				//	background.height = content.height + 20;
				//}
			}
			public function set backgroundLdr(bgImage:String):void {
				_background = bgImage;
				
				var my_bgMcl:Loader = new Loader();
				
				if (_background=="No Background") {
					var num:int = background.numChildren;
					for (var i:int=num-1;i>=0;i--) {
						background.removeChildAt(i);
					}
				} else {
					var pictURL:String = File.applicationResourceDirectory.nativePath +File.separator+"lib"+File.separator+"backgrounds"+File.separator+_background;
					var pictURLReq:URLRequest = new URLRequest(pictURL);			
					my_bgMcl.name = "background";
					my_bgMcl.load(pictURLReq);
					my_bgMcl.contentLoaderInfo.addEventListener(Event.COMPLETE, backImgLoaded); 
					my_bgMcl.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, imgIOError);
				}
			}
			
			public function get backgroundLdr():String {
				return _background;
			}
			
			public function imgLoaded(event:Event):void	{
					
				var num:int = content.numChildren;
				for (var i:int=num-1;i>=0;i--) {
					content.removeChildAt(i);
				}
				var newDo:DisplayObject = event.target.content;
				newDo.width = 680;
				newDo.height = 480;
				content.addChild(newDo);
				//images.addChild(newDo);
				
			}
			public function imgIOError(event:Event):void {
				trace("IO error:"+event.toString());
			}
				
			public function set map(url:String):void {
				var my_mcl:Loader = new Loader();
				
				if (url=="No Map") {
					var num:int = content.numChildren;
					for (var i:int=num-1;i>=0;i--) {
						content.removeChildAt(i);
					}
				} else {
					var pictURL:String = File.applicationResourceDirectory.nativePath +File.separator+"lib"+File.separator+"maps"+File.separator+url;
					var pictURLReq:URLRequest = new URLRequest(pictURL);			
					
					my_mcl.load(pictURLReq);
					my_mcl.name = "content";
					my_mcl.contentLoaderInfo.addEventListener(Event.COMPLETE, imgLoaded); 
					my_mcl.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, imgIOError);
				}	
				
			}
			public  function get map():String {
				return _map;
			}
			
			private function init():void {
				__width = 800;
				__height = 600;
				scaleX = 1;
				scaleY = 1;
				//setSize(__width, __height);
				
				mode = "movePoints";
				snap = true;
			}
			
			private function changeMode(eventObj:Event):void {
				switch (eventObj.target._name) {
					case "add_btn":
						mode = "addPoints";
						break;
					case "move_btn":
						mode = "movePoints";
						break;
					case "delete_btn":
						mode = "deletePoints";
						break;			
				}
			}
			
			private function toggleSnapping(eventObj:Object):void {

				snap = (_snapToGrid != 5);
			}
			private function focusPoly(event:Event):void {
				imagesP.horizontalScrollPosition = imagesP.maxHorizontalScrollPosition/2;
				imagesP.verticalScrollPosition = imagesP.maxVerticalScrollPosition/2;
			}
			private function zoomOut(eventObj:Event):void {
				squat.scaleX = squat.scaleX -= .1;
				squat.scaleY = squat.scaleX;
				background.scaleX = background.scaleX -= .1;
				background.scaleY = background.scaleX;
				content.scaleX = content.scaleX -= .1;
				content.scaleY = content.scaleX;
				
				imagesP.validateDisplayList();
			}
			private function zoom100(eventObj:Event):void {
				squat.scaleX = squat.scaleX = 1;
				squat.scaleY = squat.scaleX;
				background.scaleX = background.scaleX = 1;
				background.scaleY = background.scaleX;
				content.scaleX = content.scaleX = 1;
				content.scaleY = content.scaleX;
				
				imagesP.validateDisplayList();
			}
			private function zoomIn(eventObj:Event):void {
				squat.scaleX = squat.scaleX += .1;
				squat.scaleY = squat.scaleX;
				background.scaleX = background.scaleX += .1;
				background.scaleY = background.scaleX;
				content.scaleX = content.scaleX += .1;
				content.scaleY = content.scaleX;
				
				imagesP.validateDisplayList();
			}
			
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
			public function imagesPClick(event:MouseEvent):void {
				trace(event.toString());
				var x:Number = event.localX;
				var y:Number = event.localY;
				addPoint(x,y);
			}
			
			
			private function addAlert(x:Number, y:Number):void {
				x = Math.round(x / _snapToGrid) * _snapToGrid;
				y = Math.round(y / _snapToGrid) * _snapToGrid;
				_alerts.push({id:0, x:x, y:y});
				dispatchEvent({type:"alertAdd", target:alerts[alerts.length - 1]});
				drawAlerts();
			}
			
			private function addDoor(x:Number, y:Number):void {
				x = Math.round(x / _snapToGrid) * _snapToGrid;
				y = Math.round(y / _snapToGrid) * _snapToGrid;
				_doors.push({pos:x + "," + y + "," + (x + 50) + "," + y, colour1:"0xCC0000", thickness:5});
				dispatchEvent({type:"doorAdd", target:doors[doors.length - 1]});
				drawDoors();
			}
			
			private function addPoint(x:Number, y:Number):void {
				x = Math.round(x / _snapToGrid) * _snapToGrid;
				y = Math.round(y / _snapToGrid) * _snapToGrid;
				
				if (_poly == undefined || _poly.length == 0) {
					_poly = [x, y];
				} else if (_poly.length == 2) {
					_poly = _poly.concat([x, y]);
				} else {
					var i = 0;
					var len = _poly.length;
					var smallestDist = Number.POSITIVE_INFINITY;
					var p1, p2, dist;
					var idx = 0;
								
					for (i; i<len; i+=2) {
						p1 = {x:_poly[i], y:_poly[i+1]};
						if (i < len - 2) {
							p2 = {x:_poly[i+2], y:_poly[i+3]};
						} else {
							p2 = {x:_poly[0], y:_poly[1]};
						}
									
						dist = point2LineLength(x, y, p1.x, p1.y, p2.x, p2.y);
					
						if (dist < smallestDist) {
							smallestDist = dist;
							idx = i + 2;
						}
					}
					
					_poly.splice(idx, 0, x, y);
				}
				dispatchEvent({type:"polyChange", target:this});
				drawHandles();
				drawPoly();
			}
						
			private function removeAlert(idx):void {
				_alerts.splice(idx, 1);
				drawAlerts();
			}
			
			private function removeDoor(idx):void {
				_doors.splice(idx, 1);
				drawDoors();
			}
			
			private function removePoint(idx):void {
				_poly.splice(idx, 2);
				drawHandles();
				drawPoly();
			}
		
			private function point2LineLength(x:Number, y:Number, x0:Number, y0:Number, x1:Number, y1:Number) {
				var o, left, tg;
				
				if (!(x1 - x0)) {
					o = {x:x0, y:y};			
				} else if (!(y1 - y0)) {
					o = {x:x, y:y0};
				} else {
					tg = -1 / ((y1 - y0) / (x1 - x0));
					o = {x:left = (x1 * (x * tg - y + y0) + x0 * (x * -tg + y - y1)) / (tg * (x1 - x0) + y0 - y1), y:tg * left - tg * x + y};
				}
		
				if (!(o.x >= Math.min(x0, x1) && o.x <= Math.max(x0, x1) && o.y >= Math.min(y0, y1) && o.y <= Math.max(y0, y1))) {
					var line1 = lineLength(x, y, x0, y0);
					var line2 = lineLength(x, y, x1, y1);
					return line1 > line2 ? line2 : line1;
				} else {
					var a = y0 - y1;
					var b = x1 - x0;
					var c = x0 * y1 - y0 * x1;
					return Math.abs(a * x + b * y + c) / Math.sqrt(a * a + b * b);
				}
			}
			private function lineLength(x:Number, y:Number, x0:Number, y0:Number):Number {
					return Math.sqrt((x -= x0) * x + (y -= y0) * y);
			}
			
			private function draw():void {}
			
			private function drawDoor(idx, coords):void {
				var doors_mc:MovieClip = content.doors_mc;
				var door_mc:MovieClip = doors_mc["door" + idx + "_mc"];
				
				var thickness = (_doors[idx].thickness > 0) ? _doors[idx].thickness : 5;
				var colour = _doors[idx].colour1;
		
				var line_mc = door_mc.createEmptyMovieClip("line_mc", 50);
				
				line_mc.lineStyle(thickness, colour, 90, true, "normal", "none");
				line_mc.moveTo(coords[0], coords[1]);
				line_mc.lineTo(coords[2], coords[3]);
			}
			
			private function drawDoors():void {
				var doors_mc:MovieClip = content.createEmptyMovieClip("doors_mc", 30);
				
				for (var i=0; i<_doors.length; i++) {
					var door_mc = doors_mc.createEmptyMovieClip("door" + i + "_mc", doors_mc.getNextHighestDepth());
					
					var coords = _doors[i].pos.split(",");
					
					var handle1_mc = door_mc.attachMovie("handle", "handle1_mc", 20);
					handle1_mc.x = coords[0];
					handle1_mc.y = coords[1];
					handle1_mc.idx = i;
					handle1_mc.obj = this;
					
					var handle2_mc = door_mc.attachMovie("handle", "handle2_mc", 30);
					handle2_mc.x = coords[2];
					handle2_mc.y = coords[3];
					handle2_mc.idx = i;
					handle2_mc.obj = this;
					
					drawDoor(i, coords);
					
					handle1_mc.onPress = handle2_mc.onPress = function () {
						if (this.obj.mode == "movePoints") {
							this.obj.dispatchEvent({type:"doorSelect", target:this.obj.doors[this.idx]});
							var images = this.obj.images;
							
							this.onEnterFrame = function () {
								if (this.obj.mouseX < images.x) {
									images.hPosition -= 10;
									if (images.hPosition < 10) images.hPosition = 1;
								}
								if (this.obj.mouseY < images.y ) {
									images.vPosition -= 10;
									if (images.vPosition < 10) images.vPosition = 1;
								}
								if (this.obj.mouseX > images.x + images.width) {
									images.hPosition += 10;
									if (images.hPosition > images.maxHPosition + 10) images.hPosition = images.maxHPosition;
								}
								if (this.obj.mouseY > images.y + images.height) {
									images.vPosition += 10;
									if (images.vPosition > images.maxVPosition + 10) images.vPosition = images.maxVPosition;
								}
								x = doors_mc.mouseX;
								y = doors_mc.mouseY;
								x = Math.round(x / this.obj._snapToGrid) * this.obj._snapToGrid;
								y = Math.round(y / this.obj._snapToGrid) * this.obj._snapToGrid;
		
								var coords = this.obj._doors[this.idx].pos.split(",");
													
								if (this._name == "handle1_mc") {
									coords[0] = x;
									coords[1] = y;
								} else {
									coords[2] = x;
									coords[3] = y;							
								}
								
								this.obj._doors[this.idx].pos = coords.join(",");
								
								this.obj.drawDoor(this.idx, coords);
							}
						} else if (this.obj.mode == "deletePoints") {
							this.obj.dispatchEvent({type:"doorDelete", target:this.obj.doors[this.idx]});
							this.obj.removeDoor(this.idx);
						}
					}
					handle1_mc.onRelease = handle1_mc.onReleaseOutside = handle2_mc.onRelease = handle2_mc.onReleaseOutside = function () {
						if (this.obj.mode == "movePoints") {
							this.onEnterFrame();
							delete this.onEnterFrame;
							this.obj.dispatchEvent({type:"doorMove", target:this.obj.doors[this.idx]});
						}
					}
				}
			}
			
			private function drawAlerts():void {
				var alerts_mc:MovieClip = content.createEmptyMovieClip("alerts_mc", 20);
				
				for (var i=0; i<_alerts.length; i++) {
					var handle_mc = alerts_mc.attachMovie("handle", "handle_mc", alerts_mc.getNextHighestDepth());
					
					if (_alerts[i].x != undefined && _alerts[i].y != undefined) {
						handle_mc.x = _alerts[i].x;
						handle_mc.y = _alerts[i].y;
					} else {
						handle_mc.x = content.poly_mc.midX;
						handle_mc.y = content.poly_mc.midY;
					}
					handle_mc.id = _alerts[i].id
					handle_mc.idx = i;
					handle_mc.obj = this;
					
					handle_mc.onPress = function () {
						if (this.obj.mode == "movePoints") {
							this.obj.dispatchEvent({type:"alertSelect", target:this.obj.alerts[this.idx]});
							var images = this.obj.images;
							
							this.onEnterFrame = function () {
								if (this.obj.mouseX < images.x) {
									images.hPosition -= 10;
									if (images.hPosition < 10) images.hPosition = 1;
								}
								if (this.obj.mouseY < images.y ) {
									images.vPosition -= 10;
									if (images.vPosition < 10) images.vPosition = 1;
								}
								if (this.obj.mouseX > images.x + images.width) {
									images.hPosition += 10;
									if (images.hPosition > images.maxHPosition + 10) images.hPosition = images.maxHPosition;
								}
								if (this.obj.mouseY > images.y + images.height) {
									images.vPosition += 10;
									if (images.vPosition > images.maxVPosition + 10) images.vPosition = images.maxVPosition;
								}
								x = alerts_mc.mouseX;
								y = alerts_mc.mouseY;
								x = Math.round(x / this.obj._snapToGrid) * this.obj._snapToGrid;
								y = Math.round(y / this.obj._snapToGrid) * this.obj._snapToGrid;
								this.obj._alerts[this.idx].x = x;
								this.obj._alerts[this.idx].y = y;
							}
						} else if (this.obj.mode == "deletePoints") {
							this.obj.dispatchEvent({type:"alertDelete", target:this.obj.alerts[this.idx]});
							this.obj.removeAlert(this.idx);
						}
					}
					handle_mc.onRelease = handle_mc.onReleaseOutside = function () {
						if (this.obj.mode == "movePoints") {
							this.onEnterFrame();
							delete this.onEnterFrame;
							this.obj.dispatchEvent({type:"alertMove", target:this.obj.alerts[this.idx]});
						}
					}
				}
			}
			
			private function drawHandles():void {
				var points_mc:MovieClip = content.createEmptyMovieClip("points_mc", 5);
				
				var counter = 0;
				for (var q=0; q<_poly.length; q=q+2) {
					var handle_mc = points_mc.attachMovie("handle", "handle" + (counter++) + "_mc", points_mc.getNextHighestDepth());
					handle_mc.x = _poly[q];
					handle_mc.y = _poly[q+1];
					handle_mc.idx = q;
					handle_mc.obj = this;
					
					handle_mc.onPress = function () {
						if (this.obj.mode == "movePoints") {
							var images = this.obj.images;
							
							this.onEnterFrame = function () {
								if (this.obj.mouseX < images.x) {
									images.hPosition -= 10;
									if (images.hPosition < 10) images.hPosition = 1;
								}
								if (this.obj.mouseY < images.y ) {
									images.vPosition -= 10;
									if (images.vPosition < 10) images.vPosition = 1;
								}
								if (this.obj.mouseX > images.x + images.width) {
									images.hPosition += 10;
									if (images.hPosition > images.maxHPosition + 10) images.hPosition = images.maxHPosition;
								}
								if (this.obj.mouseY > images.y + images.height) {
									images.vPosition += 10;
									if (images.vPosition > images.maxVPosition + 10) images.vPosition = images.maxVPosition;
								}
								x = points_mc.mouseX;
								y = points_mc.mouseY;
								x = Math.round(x / this.obj._snapToGrid) * this.obj._snapToGrid;
								y = Math.round(y / this.obj._snapToGrid) * this.obj._snapToGrid;
								this.obj._poly[this.idx] = x;
								this.obj._poly[this.idx+1] = y;
								this.obj.drawPoly();
							}
						} else if (this.obj.mode == "deletePoints") {
							this.obj.removePoint(this.idx);
							dispatchEvent({type:"polyChange", target:this});
						}
					}
					handle_mc.onRelease = handle_mc.onReleaseOutside = function () {
						if (this.obj.mode == "movePoints") {
							this.onEnterFrame();
							delete this.onEnterFrame;			
							dispatchEvent({type:"polyChange", target:this});
						}
					}
				}
			}
			
			private function drawPoly():void {
				var poly_mc:MovieClip = content.createEmptyMovieClip("poly_mc", 10);
			
				var q = 0;
				var len = _poly.length;
				
				var minX = Number(_poly[0]);
				var minY = Number(_poly[1]);
				var maxX = Number(_poly[0]);
				var maxY = Number(_poly[1]);		
				
				poly_mc.lineStyle(1, 0xFFCC00);
				poly_mc.beginFill(0xFFCC00, (_mapMode == "roomPoly") ? 50 : 20);
				for (q; q<len; q+=2) {
					if (_poly[q] < minX) minX = Number(_poly[q]);
					if (_poly[q+1] < minY) minY = Number(_poly[q+1]);
					if (_poly[q] > maxX) maxX = Number(_poly[q]);
					if (_poly[q+1] > maxY) maxY = Number(_poly[q+1]);			
					if (q > 0) {
						poly_mc.lineTo(_poly[q], _poly[q+1]);
					} else {
						poly_mc.moveTo(_poly[0], _poly[1]);
					}
				}
				poly_mc.minX = minX;
				poly_mc.minY = minY;
				poly_mc.maxX = maxX;
				poly_mc.maxY = maxY;		
				poly_mc.midX = (maxX + minX) / 2;
				poly_mc.midY = (maxY + minY) / 2;
		
				poly_mc.moveTo(0, 0);
				poly_mc.endFill();
			}
			
			public function refresh() {
				drawPoly();
				if (this.mapMode == "alertGroups") drawAlerts();
				if (this.mapMode == "roomPoly") drawHandles();
				if (this.mapMode == "doors") drawDoors();
			}
	
	]]>
	</mx:Script>
</mx:Canvas>
