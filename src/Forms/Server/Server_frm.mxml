<?xml version="1.0" encoding="utf-8"?>
<BaseForm label="Server" xmlns="Forms.*"  initialize="init()" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<addForm>
		<mx:HBox width="100%" height="30">
			<mx:HBox width="50%" height="100%" horizontalAlign="left">
				<mx:Label text="Devices" fontSize="11"  fontWeight="bold" />
			</mx:HBox>
			<mx:HBox width="50%" height="100%" horizontalAlign="left">
				<mx:Label text="Description"  fontWeight="bold" />
				<mx:TextInput id="desc" text="{dataHolder.description}" enabled="true" editable="true" change="desc_changed()" width="280"/>
			</mx:HBox>
		</mx:HBox>
		<mx:DataGrid  dataProvider="{dataHolder.devices}" id="data" width="100%" height="100%" editable="false" itemEditEnd="itemEnd(event)" itemEditBegin="itemBegin(event)" itemClick="single_click(event)" itemDoubleClick="double_click(event)" doubleClickEnabled="true">
			<mx:columns>
				<mx:DataGridColumn  id="DDDT" dataField="device_type" headerText="Device Type" width="140" minWidth="130" editable="false"
                      itemEditor="Utils.Cellrenderers.DeviceTypesMultilineComboBox" rendererIsEditor="false"  editorDataField="result" />    
				<mx:DataGridColumn editable="true" headerText="Description"  dataField="description"/>
			</mx:columns>
		</mx:DataGrid>	
	</addForm>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import Utils.FixType;
			import mx.utils.ObjectProxy;
			import Objects.Server.*;
			import Utils.Cellrenderers.MultilineComboBox;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.object_proxy;
			import flash.utils.IDataOutput;
			import mx.core.Application;
		
			private var firstFix:Boolean = false;
			
			private function init():void {
				var bytes:ByteArray = new ByteArray();
				bytes.writeObject(dataHolder);
				bytes.position = 0;
				//var temp = bytes.readObject();
				undoObject =bytes.readObject();
			}
			
			override public function new_click():void {
				var newDev:Object = new Object();
				newDev.device_type = "";
				newDev.description = "";
								
				dataHolder.devices.addItem(newDev);
				
				callLater(focusNewRow);
			}
		
			public function desc_changed():void {
				 modifed = true;
				 //yuck
				 var o1:Object = this.parentApplication.CurrentObject;
				 o1.description = desc.text;
			}
			
			override public function delete_click():void {
				if (data.selectedItem != null) {
					Alert.show("Are you sure, press OK to delete " +data.selectedItem.device_type + "("+data.selectedItem.description+")", "Delete", (Alert.OK | Alert.CANCEL), this, alertHandler);
            	}
  			}
        
            // Event handler function for displaying the selected Alert button.
            private function alertHandler(event:CloseEvent):void {
                if (event.detail==Alert.OK) {
                    dataHolder.devices.removeItemAt(data.selectedIndex);
                    data.dataProvider = dataHolder.devices;
                    modifed = true;
                    Application.application.refreshTheTree();
	            }
	                else {
	                    trace("delete cancelled");
				}
            }
			
			public function focusNewRow():void {
				firstFix=false
				data.dataProvider = dataHolder.devices;
				data.editedItemPosition = {columnIndex:0,rowIndex:data.dataProvider.length-1};
				data.editable=true;
				modifed = true;
				
			}
			public function itemBegin(event:Event):void {
				modifed = true;
				trace (event.toString());
				
			}
			public function itemEnd(event:Event):void {
				trace (event.toString());
				if (event.dataField == "device_type" && firstFix==false) {
					var myObj:Object;
					if (event.target.itemEditorInstance.result == null) {
						myObj = new event.target.itemEditorInstance.dpValue[0].data;
					} else {
						myObj = new event.target.itemEditorInstance.result;
					}
					data.editedItemPosition = {columnIndex:1,rowIndex:data.dataProvider.length-1};	
					myObj.newObject();
					
					firstFix = true;
					dataHolder.devices[dataHolder.devices.length-1] = myObj;
					Application.application.refreshTheTree();
				}
				else {
					data.editable = false;
				}
				
				//trace (event.toString());
			}
			private function fixProvider():void {
				data.dataProvider = dataHolder.devices;
			}
			override public function undo_click(event:Event):void {			
				dataHolder.description = ObjectUtil.copy(undoObject.description);
				dataHolder.dataObject = ObjectUtil.copy(undoObject.dataObject);
				dataHolder.clients = ObjectUtil.copy(undoObject.clients);
				dataHolder.devices = ObjectUtil.copy(undoObject.devices);
				
				//double yuck
				desc.text = dataHolder.description;
				var o1:Object = this.parentApplication.CurrentObject;
				o1.description = desc.text;
				
				data.dataProvider = dataHolder.devices;
				modifed = false;
				Application.application.refreshTheTree();
					
					
			}
			public function single_click(event:Event):void {
				if (event.columnIndex == 1) { //description
					data.editedItemPosition = {columnIndex:1,rowIndex:data.selectedIndex};
					data.editable=true;
					modifed = true;
				}
			}
			
			public function double_click(event:Event):void {
				//open next screen
				trace ("open "+data.selectedItem.device_type);
			}

		]]>
	</mx:Script>
</BaseForm>