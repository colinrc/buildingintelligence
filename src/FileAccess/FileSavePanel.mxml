<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
        width="400"
        title="Save eLife Project"
        showCloseButton="true"
        paddingLeft="10" paddingTop="10"
        paddingRight="10" paddingBottom="10"
        close="closeHandler(event)">

    <mx:Script>
    <![CDATA[
        import mx.events.FileEvent;
            
        import flash.filesystem.File;
        import mx.core.Application;
        import mx.events.CloseEvent;
        import mx.events.MenuEvent;
        import mx.managers.PopUpManager;

        [Bindable]
        public var cancelButtonLabel:String = "Cancel";

        [Bindable]
        public var openDirectoryButtonLabel:String = "Open";

        [Bindable]
        public var saveFileButtonLabel:String = "Save";

        /**
        * Initializes the UI.
        */
        public static function show(directory:File = null,
                                     name:String = null):FileSavePanel
        {
            var panel:FileSavePanel =
                FileSavePanel(PopUpManager.createPopUp(
                DisplayObject(mx.core.Application.application),
                FileSavePanel, true));
            PopUpManager.centerPopUp(panel);
            panel.setup(directory, name);
            return panel;
        }

       /**
        * Displays the correct directory in the UI controls.
        */
        public function setup(directory:File = null,
                              name:String = null):void
        {
            if (!directory)
                directory = File.documentsDirectory;
            fileSystemList.directory = directory;
            fileSystemList.resetHistory(directory);
            if (name)
                fileNameTextInput.text = name;
        }
        
        /**
        * Updates the label of the saveButton component, based on the 
        * type of object (file or directory) selected in the list.
        */
        private function updateSaveButton():void
        {
            var listHasFocus:Boolean =
                fileSystemList.focusManager.getFocus() == fileSystemList;
            saveButton.label = listHasFocus && fileSystemList.canNavigateDown ?
                               openDirectoryButtonLabel :
                               saveFileButtonLabel;
            saveButton.enabled =
                fileSystemList.directory != FileSystemList.COMPUTER &&
                fileNameTextInput.text != "";
        }
        
        /**
        * Dispatches a FileEvent.SELECT event object, with its file property
        * set to the selected file.
        */
        private function dispatchSelectEvent():void
        {
            var selectEvent:FileEvent = new FileEvent(Event.SELECT);
            selectEvent.file =
                fileSystemList.directory.resolvePath(fileNameTextInput.text);
            dispatchEvent(selectEvent);
        }

        /**
        * Called when the user clicks the Cancel button. The method closes the pop-up window.
        */
        private function closeHandler(event:CloseEvent):void
        {
            dispatchEvent(new Event(Event.CANCEL));
            PopUpManager.removePopUp(this);
        }

        /**
        * Called when the user clicks the Back button. The method navigates 
        * the fileSystemList component back to the previous directory.
        */
        private function backButton_clickHandler(event:MouseEvent):void
        {
            fileSystemList.navigateBack();
        }

        /**
        * Called when the user selects an item from the Back button history list. 
        * The method navigates the fileSystemList component back to the previous directory.
        */
        private function backButton_itemClickHandler(event:MenuEvent):void
        {
            fileSystemList.navigateBack(event.index);
        }

        /**
        * Called when the user clicks the Forward button. The method navigates 
        * the fileSystemList component back to the previous directory.
        */
        private function forwardButton_clickHandler(event:MouseEvent):void
        {
            fileSystemList.navigateForward();
        }

         /**
        * Called when the user selects an item from the Forward button history list. 
        * The method navigates the fileSystemList component back to the previous directory.
        */
        private function forwardButton_itemClickHandler(event:MenuEvent):void
        {
            fileSystemList.navigateForward(event.index);
        }

         /**
        * Called when the user selects an item in the FileSystemComboBox component. 
        * The method navigates the fileSystemList component to the selected directory.
        */
        private function fileSystemComboBox_changeHandler(event:Event):void
        {
            fileSystemList.navigateTo(File(fileSystemComboBox.selectedItem));
        }

        /**
        * Called when the user clicks the Up button. The method navigates the  
        * fileSystemList component to the parent directory.
        */
        private function upButton_clickHandler(event:MouseEvent):void
        {
            fileSystemList.navigateUp();
        }

        /**
        * Updates the Save button when the directory in the FileSystemList component changes.
        */
        private function fileSystemList_directoryChangeHandler(event:FileEvent):void
        {
            updateSaveButton();
        }

        /**
        * Updates the Save button when the FileSystemList component gets focus.
        */
        private function fileSystemList_focusInHandler(event:FocusEvent):void
        {
            updateSaveButton();
        }
        
        /**
        * Updates the Save button when FileSystemList component loses focus.
        */
        private function fileSystemList_focusOutHandler(event:FocusEvent):void
        {
            updateSaveButton();
        }
        
        /**
        * Updates the Save button when the filename changes.
        */
        private function fileNameTextInput_changeHandler(event:Event):void
        {
            updateSaveButton();
        }
        
        /**
        * Called when the user presses the Enter key. This method dispatches an
        * event to the main application and closes the pop-up window.
        */
        private function fileNameTextInput_enterHandler(event:Event):void
        {
            dispatchSelectEvent();
            PopUpManager.removePopUp(this);
        }
        
        /**
        * Called when the user clicks the Save button. The method dispatches 
        * an event to the main application and removes the pop-up window.
        */
        private function saveButton_clickHandler(event:MouseEvent):void
        {
            dispatchSelectEvent();
            PopUpManager.removePopUp(this);
        }
 
        /**
        * Called when the user clicks the Cancel button. The method dispatches a
        * cancel event to the main application and removes the pop-up window.
        */
        private function cancelButton_clickHandler(event:MouseEvent):void
        {
            dispatchEvent(new Event(Event.CANCEL));
            PopUpManager.removePopUp(this);
        }
        
        /**
        * Updates the filename in the TextInput control to the name of the file clicked.
        */
        private function fileSelected():void 
        {
            if (fileSystemList.selectedItem && !fileSystemList.selectedItem.isDirectory)
            {
                fileNameTextInput.text = fileSystemList.selectedItem.name;
            }
            else
            {
                fileNameTextInput.text = "";
            }
            updateSaveButton();
        }
    ]]>
    </mx:Script>
    
    <mx:HBox width="100%">
        <mx:FileSystemHistoryButton id="backButton" width="40" label="&lt;" toolTip="Back"
                                    enabled="{fileSystemList.canNavigateBack}"
                                    dataProvider="{fileSystemList.backHistory}"
                                    click="backButton_clickHandler(event)"
                                    itemClick="backButton_itemClickHandler(event)"/>
        <mx:FileSystemHistoryButton id="forwardButton" width="40" label="&gt;" toolTip="Forward"
                                    enabled="{fileSystemList.canNavigateForward}"
                                    dataProvider="{fileSystemList.forwardHistory}"
                                    click="forwardButton_clickHandler(event)"
                                    itemClick="forwardButton_itemClickHandler(event)"/>
        <mx:FileSystemComboBox id="fileSystemComboBox" width="100%" toolTip="Current Directory"
                               directory="{fileSystemList.directory}"
                               change="fileSystemComboBox_changeHandler(event)"/>
        <mx:Button id="upButton" width="22" label="^" toolTip="Up"
                   enabled="{fileSystemList.canNavigateUp}"
                   click="upButton_clickHandler(event)"/>
    </mx:HBox>
    <mx:FileSystemList id="fileSystemList" width="100%" rowCount="10"
                       directoryChange="fileSystemList_directoryChangeHandler(event)"
                       focusIn="fileSystemList_focusInHandler(event)"
                       focusOut="fileSystemList_focusOutHandler(event)"
                       click="fileSelected()" />
    <mx:HBox width="100%">
        <mx:Label text="Filename:" width="75"/>
        <mx:TextInput id="fileNameTextInput" width="100%"
                      change="fileNameTextInput_changeHandler(event)"
                      enter="fileNameTextInput_enterHandler(event)"/>
    </mx:HBox>
    <mx:HBox width="100%" horizontalAlign="center">
        <mx:Button id="cancelButton" width="80" label="{cancelButtonLabel}"
                   click="cancelButton_clickHandler(event)"/>
        <mx:Button id="saveButton" width="80"
                   click="saveButton_clickHandler(event)"/>
    </mx:HBox>
</mx:TitleWindow>