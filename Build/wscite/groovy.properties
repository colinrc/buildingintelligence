# Define SciTE settings for Groovy files.

file.patterns.groovy=*.groovy;
filter.groovy=Groovy (groovy)|$(file.patterns.groovy)|

lexer.$(file.patterns.groovy)=groovy

keywordclass.groovy=abstract assert boolean break byte case catch char class \
const continue default do double else extends final finally float for future \
generic goto if implements import inner instanceof int interface long \
native new null outer package private protected public rest \
return short static super switch synchronized this throw throws \
transient try var void volatile while

keywords.$(file.patterns.groovy)=$(keywordclass.groovy)

comment.block.$(file.patterns.groovy)=//~
comment.block.at.line.start.$(file.patterns.groovy)=1
comment.stream.start.$(file.patterns.groovy)=/*
comment.stream.end.$(file.patterns.groovy)=*/
comment.box.start.$(file.patterns.groovy)=/*
comment.box.middle.$(file.patterns.groovy)=*
comment.box.end.$(file.patterns.groovy)=*/
word.chars.groovy=$(chars.alpha)$(chars.numeric)_#
word.characters.groovy=$(word.chars.groovy)

statement.indent.$(file.patterns.groovy)=5 case catch class default do else finally \
for if private protected public struct try union while
statement.end.$(file.patterns.groovy)=10 ;
# statement.lookback.$(file.patterns.groovy)=20
block.start.$(file.patterns.groovy)=10 {
block.end.$(file.patterns.groovy)=10 }


styling.within.preprocessor=1
preprocessor.symbol.groovy=#
preprocessor.start.groovy=if ifdef ifndef
preprocessor.middle.groovy=else elif

# Default
style.groovy.32=$(font.base)
# Braces are only matched in operator style
braces.groovy.style=10
# White space
style.groovy.0=fore:#808080
# Comment: /* */.
style.groovy.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //.
style.groovy.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.groovy.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.groovy.4=$(colour.number)
# Keyword
style.groovy.5=$(colour.keyword),bold
# Double quoted string
style.groovy.6=$(colour.string)
# Single quoted string
style.groovy.7=$(colour.char)
# UUIDs (only in IDL)
style.groovy.8=fore:#804080
# Preprocessor
style.groovy.9=$(colour.preproc)
# Operators
style.groovy.10=$(colour.operator),bold
# Identifiers
style.groovy.11=
# End of line where string is not closed
style.groovy.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.groovy.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.groovy.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.groovy.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.groovy.16=fore:#B00040
# Comment keyword
style.groovy.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.groovy.18=fore:#804020,$(font.code.comment.doc)

autocomplete.groovy.ignorecase=1
autocomplete.groovy.start.characters=.;$(chars.alpha)
autocomplete.groovy.fillups=(
calltip.groovy.word.characters=._$(chars.alpha)$(chars.numeric)
calltip.groovy.ignorecase=1
calltip.groovy.end.definition=1
calltip.groovy.parameters.start = (
calltip.groovy.parameters.end = )
calltip.groovy.parameters.separators = ,

