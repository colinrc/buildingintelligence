<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas initialize="init()" xmlns:mx="http://www.adobe.com/2006/mxml" width="720" height="648" xmlns:ns1="Utils.Cellrenderers.*">
	<mx:TextArea x="148" y="159" text="Available Items:" width="105" height="24" editable="false" fontWeight="bold"/>
	<mx:TextArea x="408" y="159" text="Used Items:" width="105" height="24" editable="false" fontWeight="bold"/>
	<mx:Button click="remSel()" x="320" y="298" width="80" label="&lt;">
	</mx:Button>
	<mx:Button x="320" y="328" click="remAll()" width="80" label="&lt;&lt;">
	</mx:Button>
	<mx:Button x="320" y="238" click="addAll()" width="80" labelPlacement="left" label="&gt;&gt;">
	</mx:Button>
	<mx:Button x="320" y="268" click="addSel()" width="80" enabled="true" label="&gt;">
	</mx:Button>
	<mx:Button click="publish()" x="163" y="358" label="Publish" labelPlacement="left"/>
	<mx:Button x="163" y="468" label="Browse" id="browse_btn" labelPlacement="left" click="browsePathForExport()" width="67"/>
	<mx:Button x="163" y="438" label="Export" id="export_btn" labelPlacement="left" click="export(pathInput.text)" width="67"/>
	<mx:CheckBox x="10" y="44" label="Full Screen:"  labelPlacement="left" id="file_chk" fontWeight="bold"/>
	<mx:CheckBox x="10" y="74" label="Hide Mouse cursor:"  labelPlacement="left" id="console_chk" fontWeight="bold"/>
	<mx:CheckBox x="10" y="104" label="Debug Mode:"  labelPlacement="left" id="console_chk0" fontWeight="bold"/>
	<mx:List dataProvider="{availableItems}" x="150" y="191" height="159" id="availableList" enabled="true"  alternatingItemColors="[#FFFFFF, #DBEAF1]"  width="162"></mx:List>
	<mx:List dataProvider="{usedItems}" x="408" y="191" height="159" id="usedList" alternatingItemColors="[#FFFFFF, #DBEAF1]" enabled="true"></mx:List>
	<mx:Label x="249" y="451" text="Export Path:" fontWeight="bold"/>
	<mx:TextInput x="249" y="468" id="pathInput" editable="true" enabled="true" width="321"/>
	<mx:TextArea x="10" y="498" width="701" height="140" id="output_ta" editable="false"/>
	<mx:Button x="163" y="388" label="Export to Project" id="exportToProject_btn" labelPlacement="left" click="export()" width="124"/>
	<mx:Label x="10" y="10" text="Bootstrap Settings:" fontWeight="bold" fontSize="12"/>
	<mx:Label x="148" y="131" text="Publish Items:" fontWeight="bold" fontSize="12"/>
	<mx:Label x="10" y="470" text="Log Results:" fontWeight="bold" fontSize="12"/>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import FileAccess.XMLFile;
			import flash.events.Event;
			import mx.utils.ObjectProxy;
			import Objects.ServerConnection;
			import Objects.MonitorConnection;
			import mx.core.Application;
			import flash.filesystem.File;
			import mx.collections.*;
			import Objects.Client.Sounds;
		
		//	import air.net.SocketMonitor;
		//	import flash.events.StatusEvent;
			public var path:String;
			public var monitorConnection:ObjectProxy = new ObjectProxy(Application.application.currentCTObj.monitorConnection);
			public var clientInstance:ObjectProxy = new ObjectProxy(Application.application.currentCTObj);
			public var wsConnection:ObjectProxy = new ObjectProxy(Application.application.currentCTObj.serverParent.wsConnection);
			
			public var myStyles:StyleSheet;	
			public var file:File = new File();
			
			public var sortA:Sort = new Sort();
              
			[Bindable]
			public var availableItems:ArrayCollection;
			
			[Bindable]
			public var usedItems:ArrayCollection;
			
			
			static public var initItems:Array = [
					{label:"Bootstrap Config",data:"Bootstrap Config"},
					{label:"Icons",data:"Icons"},
					{label:"Maps",data:"Maps"},
					{label:"Sounds",data:"Sounds"},
					{label:"Backgrounds",data:"Backgrounds"},
					{label:"Client Config",data:"Client Config"},
					{label:"Objects",data:"Objects"}
				];
				
			private function init():void {
				monitorConnection.attachView(this);	
				
				myStyles = new StyleSheet();
				myStyles.setStyle("time", {fontFamily:'Arial,Helvetica,sans-serif', textDecoration:'underline', fontSize:'10px', fontWeight:'bold', color:'#000000'});
				myStyles.setStyle("error", {fontFamily:'Arial,Helvetica,sans-serif', fontSize:'12px', color:'#FF0000'});
								
				availableItems = new ArrayCollection(initItems);
				usedItems = new ArrayCollection();
			//	socketMonitor = new SocketMonitor('www.adobe.com',80);
				//socketMonitor.addEventListener(StatusEvent.STATUS, socketStatusChange);
				//socketMonitor.start();
				sortA.fields=[new SortField("label", true, true)];
				
			}
			public function fstCreated():void {
				fileSystemTree.directory= FileSystemTree.COMPUTER;
			}
			private function deploy() {
				trace("deploy files");
			}
					
			public function needRefresh():void{
				trace("needRefresh in server controls");
			}
			
			public function browsePathForExport():void {
				file.browseForDirectory("Select the folder to Export files to");
				file.addEventListener(Event.SELECT, fileBrowseSelectListener);
				
			}
			public function fileBrowseSelectListener(event:Event):void {
				file = event.target as File;
				pathInput.text = file.nativePath.toString();
			}
			
			public function export(thePath:String= null):void{
				var save:XMLFile = new XMLFile();
				var AppPath:String = File.applicationResourceDirectory.nativePath;
				var path:String = "";
				if (thePath==null||thePath=="") {
					//use project path
					path = Application.application.project.path;
				} else {
					path = pathInput.text;
				}
				for(var publishItem in usedList.dataProvider){
				switch(usedList.dataProvider[publishItem].label){
					case "Client Config":
						var theXML:String = clientInstance.clientDesign.toXML().toXMLString();
						var save:XMLFile = new XMLFile();
						save.saveFile(path+"client"+File.separator+"client.xml", theXML);
						output_ta.text = output_ta.text+"Client Configuration exported to "+path+"client"+File.separator+"client.xml \n";
						break;
					case "Bootstrap Config":
						var save:XMLFile = new XMLFile();
						save.saveFile(path+"client"+File.separator+"elife.xml", generateBootstrap().toXMLString());
						output_ta.text = output_ta.text+"Client Bootstrap exported to "+path+"client"+File.separator+"elife.xml \n";
						break;
					case "Icons":
						var save:XMLFile = new XMLFile();
						var tempIcons:Array = clientInstance.clientDesign.getIcons();
						tempIcons = tempIcons.sort();
						tempIcons.push("warning");
						tempIcons.push("keyboard_key");
						tempIcons.push("atom");
						tempIcons.push("up-arrow");
						tempIcons.push("down-arrow");
						tempIcons.push("delete");
						tempIcons.push("home");
						tempIcons.push("left-arrow");
						tempIcons.push("right-arrow");
						tempIcons.push("stop");
						tempIcons.push("refresh");
						tempIcons.push("find");
						tempIcons.push("gears");
						tempIcons.push("notepad");
						tempIcons.push("speaker");
						tempIcons.push("spanner");
						tempIcons.push("red-pin");
						tempIcons.push("media-stop");
						tempIcons.push("media-fwd");
						tempIcons.push("media-play");
						tempIcons.push("delete2");
						tempIcons.push("led-green");
						tempIcons.push("led-red");
						tempIcons.push("power-red");
						tempIcons.push("power-green");
						tempIcons.push("locked");
						tempIcons.push("unlocked");
						tempIcons.push("calendar");
						tempIcons.push("check");
						var icons = new Array();
						var lastIcon:String;
						for(var tempIcon in tempIcons){
							if(tempIcons[tempIcon] != lastIcon){
								icons.push(tempIcons[tempIcon]);
								lastIcon = tempIcons[tempIcon];
							}
						}
						var new_icons = "";
						for(var icon in icons){
							var iconString = icons[icon]+".png";
							save.copyFile(AppPath+File.separator+"lib"+File.separator+"icons"+File.separator+icons[icon]+".png", path+"client"+File.separator+"lib"+File.separator+"icons"+File.separator+icons[icon]+".png");
							new_icons += iconString+"\n";
						}
						save.saveFile(path+"client"+File.separator+"lib"+File.separator+"icons"+File.separator+"_icons.txt", new_icons);
						output_ta.text = output_ta.text+"Client Icons exported\n";
						break;
								
					case "Maps":
						var tempZones = clientInstance.clientDesign.Property.zones;
						for(var zone in tempZones){
							if((tempZones[zone].map != undefined)&&(tempZones[zone].map != "")){
								save.copyFile(AppPath+File.separator+"lib"+File.separator+"maps"+File.separator+tempZones[zone].map, path+File.separator+"client"+File.separator+"lib"+File.separator+"maps"+File.separator+tempZones[zone].map);
							}
						}
						output_ta.text = output_ta.text+"Client Maps exported\n";
						break;
					case "Backgrounds":
						var tempZones = clientInstance.clientDesign.Property.zones;
						for(var zone in tempZones){
							if((tempZones[zone].background != undefined)&&(tempZones[zone].background != "")){
								save.copyFile(AppPath+File.separator+"lib"+File.separator+"backgrounds"+File.separator+tempZones[zone].background, path+File.separator+"client"+File.separator+"lib"+File.separator+"backgrounds"+File.separator+tempZones[zone].background);
							}
						}
						output_ta.text = output_ta.text+"Client Backgrounds exported\n";
						break;
					case "Sounds":
						var tempSounds = clientInstance.clientDesign.sounds.sounds;
						for(var sound in tempSounds){
							save.copyFile(AppPath+File.separator+"lib"+File.separator+tempSounds[sound].@file, path+File.separator+"client"+File.separator+"lib"+File.separator+tempSounds[sound].@file);
						}					
						output_ta.text = output_ta.text+"Client Sounds exported\n";
						break;			
					
					case "Objects":
						var tempZones = clientInstance.clientDesign.property.zones;
						for(var zone in tempZones){
							if((tempZones[zone].map != undefined)&&(tempZones[zone].map != "")){
								save.copyFile(AppPath+File.separator+"lib"+File.separator+"objects"+File.separator+tempZones[zone].map, path+File.separator+"client"+File.separator+"lib"+File.separator+"maps"+File.separator+tempZones[zone].map);
							}
						}				
						output_ta.text = output_ta.text+"Client Objects exported\n";
						break;	
					}
				
				}
				
			}

			public function publish(){
				for(var publishItem in usedList.dataProvider){
					switch(usedList.dataProvider[publishItem].label){
						case "Server Config":
							wsConnection.setRemotePath("/server/config");
							wsConnection.putData(Application.application.serverDesign.toXML().toXMLString(),"server.xml");
							break;
						case "Bootstrap Config":
							wsConnection.setRemotePath("/server/datafiles");
							wsConnection.putData(generateBootstrap(),"bootstrap.xml");
							break;
						case "IR Codes":
							wsConnection.setLocalPath(appPath +"/datafiles");				
							wsConnection.setRemotePath("/server/datafiles");
							wsConnection.putItem("ircodes.xml");
							break;					
						case "Scripts":
							var scriptsNode = _global.serverDesign.getScripts();
							for(var child in scriptsNode.childNodes){
								wsConnection.setLocalPath(_global.project.path+"/server/script");
								wsConnection.setRemotePath("/server/script");
								wsConnection.putItem(scriptsNode.childNodes[child].attributes["NAME"]+".py");
							}
							wsConnection.setLocalPath(appPath +"/datafiles");
							wsConnection.setRemotePath("/server/datafiles");					
							wsConnection.putData(_global.writeXMLFile(scriptsNode, 0),"script_status.xml");
							break;
						case "Macros":
							wsConnection.setLocalPath(appPath +"/datafiles");
							wsConnection.setRemotePath("/server/datafiles");				
							var tempMacros = new XMLNode(1,"MACROS");
							tempMacros.attributes.COMPLETE = "Y";
							var tempIntegratorMacros = new XMLNode(1,"MACROS");
							tempIntegratorMacros.attributes.COMPLETE = "Y";					
							var macros = _global.serverDesign.getMacros();
							for(var macro = 0; macro<macros.length; macro++){
								if(macros[macro].integrator){
									tempIntegratorMacros.appendChild(macros[macro].publish());
								} else{
									tempMacros.appendChild(macros[macro].publish());
								}
							}
							wsConnection.putData(_global.writeXMLFile(tempMacros, 0),"macros.xml");
							wsConnection.putData(_global.writeXMLFile(tempIntegratorMacros, 0),"integrator_macros.xml");
							break;
						case "Calendar":
							wsConnection.setLocalPath(appPath +"/datafiles");				
							wsConnection.setRemotePath("/server/datafiles");
							wsConnection.putItem("calendar.xml");
							break;					
					}
				}
			}
			public function generateBootstrap():XML{
				var newBootstrapXML:XML = new XML("<BOOTSTRAP />");
				var newServerNode:XML = new XML("<SERVER />");
				newServerNode.@IP = "";
				newServerNode.@PORT = "10000";
				newBootstrapXML.appendChild(newServerNode);
				var newAdminNode:XML = new XML("<ADMIN />");
				newAdminNode.@IP = "";
				newAdminNode.@PORT = "10001";
				newBootstrapXML.appendChild(newAdminNode);
				var newConfigNode:XML = new XML("<CONFIG_FILE />");
				newConfigNode.@NAME = "server.xml";
				newBootstrapXML.appendChild(newConfigNode);
				var newDebugNode:XML = new XML("<DEBUG />");
				if(file_chk.selected){
					newDebugNode.@FILE = "Y";
				} else{
					newDebugNode.@FILE = "N";
				}
				if(console_chk.selected){
					newDebugNode.@CONSOLE = "Y";
				} else{
					newDebugNode.@CONSOLE = "N";
				}
				newDebugNode.@LEVEL = level.result;
				newBootstrapXML.appendChild(newDebugNode);
				var newRRDGraphNode:XML = new XML("<RRDGRAPH />");
				newRRDGraphNode.@DIR = "./JRobin/Graph/";
				newBootstrapXML.appendChild(newRRDGraphNode);
				var newRRDDirectoryNode:XML = new XML("<RRDBDIRECTORY />");
				newRRDDirectoryNode.@DIR = "./JRobin/";
				newBootstrapXML.appendChild(newRRDDirectoryNode);
				var newRRDXMLNode:XML = new XML("<RRDXMLDIRECTORY />");
				newRRDXMLNode.@DIR = "./JRobin/RRDDefinition/";
				newBootstrapXML.appendChild(newRRDXMLNode);
				return newBootstrapXML;
			}
			public function notifyChange():void{
				refreshOutput();
			}
			public function refreshOutput():void {
				//output_ta.text = wsConnection.getOutput();
			}
			private function addSel() {
				if (availableList.selectedItem != undefined) {
					usedItems.addItem(availableItems.removeItemAt(availableList.selectedIndex));
					usedItems.sort = sortA;
                	usedItems.refresh();
                }
			}
			private function addAll() {
				var leftLength:int = availableItems.length;
				for (var leftIndex:int = 0; leftIndex < leftLength; leftIndex++) {
					usedItems.addItem(availableItems.removeItemAt(0));
				}
				usedItems.sort = sortA;
                usedItems.refresh();
			}
			private function remSel() {
				if (usedList.selectedItem != undefined) {
					availableItems.addItem(usedItems.removeItemAt(usedList.selectedIndex));
					availableItems.sort = sortA;
					availableItems.refresh();
				}
			}
			private function remAll() {
				var rightLength:int = usedItems.length;
				for (var rightIndex:int = 0; rightIndex < rightLength; rightIndex++) {
					availableItems.addItem(usedItems.removeItemAt(0));
				}
				availableItems.sort = sortA;
				availableItems.refresh();
			}
			
			//--------------------------------------------------------------

			public function publishol(){
				for(var publishItem in right_li.dataProvider){
					switch(right_li.dataProvider[publishItem].label){
						case "Client Config":
							sftpConnection.setRemotePath("/client");
							sftpConnection.putData(_global.writeXMLFile(dataObject.clientDesign.toXML(), 0),"client.xml");
							break;
						case "Bootstrap Config":
							sftpConnection.setRemotePath("/client");
							sftpConnection.putData(generateBootstrap(),"elife.xml");
							break;
						case "Icons":
							sftpConnection.setLocalPath(appPath +"/lib/icons");				
							sftpConnection.setRemotePath("/client/lib/icons");
							var tempIcons = dataObject.clientDesign.getIcons();
							tempIcons = tempIcons.sort();
							tempIcons.push("warning");
							tempIcons.push("keyboard_key");
							tempIcons.push("atom");
							tempIcons.push("up-arrow");
							tempIcons.push("down-arrow");
							tempIcons.push("delete");
							tempIcons.push("home");
							tempIcons.push("left-arrow");
							tempIcons.push("right-arrow");
							tempIcons.push("stop");
							tempIcons.push("refresh");
							tempIcons.push("find");
							tempIcons.push("gears");
							tempIcons.push("notepad");
							tempIcons.push("speaker");
							tempIcons.push("spanner");
							tempIcons.push("red-pin");
							tempIcons.push("media-stop");
							tempIcons.push("media-fwd");
							tempIcons.push("media-play");
							tempIcons.push("delete2");
							tempIcons.push("led-green");
							tempIcons.push("led-red");
							tempIcons.push("power-red");
							tempIcons.push("power-green");
							tempIcons.push("locked");
							tempIcons.push("unlocked");
							tempIcons.push("calendar");
							tempIcons.push("check");
							var icons = new Array();
							var lastIcon:String;
							for(var tempIcon in tempIcons){
								if(tempIcons[tempIcon] != lastIcon){
									icons.push(tempIcons[tempIcon]);
									lastIcon = tempIcons[tempIcon];
								}
							}
							var new_icons = "";
							for(var icon in icons){
								var iconString = icons[icon]+".png";
								sftpConnection.putItem(iconString);
								new_icons += iconString+"\n";
							}
							sftpConnection.putData(new_icons,"_icons.txt");
							break;
						case "Maps":
							sftpConnection.setLocalPath(appPath +"/lib/maps");
							sftpConnection.setRemotePath("/client/lib/maps");
							var tempZones = dataObject.clientDesign.Property.zones;
							for(var zone in tempZones){
								if((tempZones[zone].map != undefined)&&(tempZones[zone].map != "")){
									sftpConnection.putItem(tempZones[zone].map);
								}
							}
							break;
						case "Backgrounds":
							sftpConnection.setLocalPath(appPath +"/lib/backgrounds");
							sftpConnection.setRemotePath("/client/lib/backgrounds");
							var tempZones = dataObject.clientDesign.Property.zones;
							for(var zone in tempZones){
								if((tempZones[zone].background != undefined)&&(tempZones[zone].background != "")){
									sftpConnection.putItem(tempZones[zone].background);
								}
							}
							break;
						case "Sounds":
							sftpConnection.setLocalPath(appPath +"/lib");
							sftpConnection.setRemotePath("/client/lib");
							var tempSounds = dataObject.clientDesign.sounds.sounds;
							for(var sound in tempSounds){
								sftpConnection.putItem(tempSounds[sound].attributes.file);
							}					
							break;
						case "Objects":
							sftpConnection.setLocalPath(appPath +"/lib/objects");
							sftpConnection.setRemotePath("/client/lib/objects");
							/*
							sftpConnection.putItem("ircodes.xml");
							*/
							break;
					}
				}
			}
			public function generateBootstrapC():String{
				var newBootstrapXML = new XMLNode(1,"client");
				var newServerNode = new XMLNode(1,"setting");
				newServerNode.attributes.name = "serverAddress";
				newServerNode.attributes.value = dataObject.serverParent.ipAddress;
				newBootstrapXML.appendChild(newServerNode);
				
				var newApplicationNode = new XMLNode(1,"setting");
				newApplicationNode.attributes.name = "applicationXML";
				newApplicationNode.attributes.value = "client.xml";
				newBootstrapXML.appendChild(newApplicationNode);
				
				var newPortNode = new XMLNode(1,"setting");
				newPortNode.attributes.name = "serverPort";
				newPortNode.attributes.value = "10000";
				newBootstrapXML.appendChild(newPortNode);
				
				var newFullScreenNode = new XMLNode(1,"setting");
				newFullScreenNode.attributes.name = "fullScreen";
				if(fullScreen_chk.selected){
					newFullScreenNode.attributes.value = "true";
				} else{
					newFullScreenNode.attributes.value = "false";
				}
				newBootstrapXML.appendChild(newFullScreenNode);
		
				var newHideCursorNode = new XMLNode(1,"setting");
				newHideCursorNode.attributes.name = "hideMouseCursor";
				if(hideMouse_chk.selected){
					newHideCursorNode.attributes.value = "true";
				} else{
					newHideCursorNode.attributes.value = "false";
				}
				newBootstrapXML.appendChild(newHideCursorNode);
				
				var newDebugNode = new XMLNode(1,"setting");
				newDebugNode.attributes.name = "debugMode";
				if(debugMode_chk.selected){
					newDebugNode.attributes.value = "true";
				} else{
					newDebugNode.attributes.value = "false";
				}
				newBootstrapXML.appendChild(newDebugNode);		
				return _global.writeXMLFile(newBootstrapXML,0);
			}
		]]>
	</mx:Script>
	
	
</mx:Canvas>

	