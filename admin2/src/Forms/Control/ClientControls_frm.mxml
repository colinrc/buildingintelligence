<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas initialize="init()" xmlns:mx="http://www.adobe.com/2006/mxml" width="720" height="648" xmlns:ns1="Utils.Cellrenderers.*">
	<mx:TextArea x="10" y="106" text="Client IP Address:" width="116" height="24" maxChars="15" restrict="0-9." fontWeight="bold" editable="false"/>
	<mx:TextArea x="10" y="74" text="Client Design:" width="116" height="24" fontWeight="bold" editable="false"/>
	<mx:TextArea x="10" y="42" text="Client Name:" width="116" height="24" fontWeight="bold" editable="false"/>
	<mx:TextArea x="10" y="167" text="Monitor:" width="78" height="24" editable="false" fontWeight="bold"/>
	<mx:Button x="134" y="202" label="Clear" id="clearMonitor" click="monitorConnection.clearOutput();monitorOutput_ta.htmlText=''"/>
	<mx:Button x="175" y="169" click="monitorDisconnect()" label="Disconnect"/>
	<mx:Button x="95" y="169" click="monitorConnect()" label="Connect"/>
	<mx:Button click="restartClient()" x="144" y="336" label="Client Restart" id="clientRestart"/>
	<mx:Button click="syncTime()" x="256" y="336" label="Sync Time"/>
	<mx:Button click="commit()" x="347" y="336" label="Commit"/>
	<mx:Button click="shutdown()" x="425" y="336" label="Shutdown"/>
	<mx:Image id="monitorLight" x="272" y="169" height="22" width="22" source="../bin/lib/icons/led-red.png"/>
	<mx:TextArea x="10" y="200" text="Monitor Output:" width="116" height="24" editable="false" fontWeight="bold"/>
	<mx:TextArea x="10" y="334" text="Monitor Commands:" width="126" height="24" editable="false" fontWeight="bold"/>
	<mx:TextArea x="10" y="226" width="701" height="100" id="monitorOutput_ta" editable="false"/>
	<mx:TextInput x="134" y="108" id="clientIP" text="127.0.0.1" maxChars="15" restrict="0-9." editable="true" enabled="true"/>
	<mx:TextInput x="134" y="44" id="clientName"  text="{clientInstance.description}" editable="true" enabled="true"/>
	<mx:Label x="10" y="10" text="Client Details" fontWeight="bold" fontSize="12"/>
	<mx:ComboBox x="134" y="73"  close="clientsCMBX(event)" id="design_cmb">
	</mx:ComboBox>
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectProxy;
			import Objects.ServerConnection;
			import Objects.MonitorConnection;
			import mx.core.Application;
		
		//	import air.net.SocketMonitor;
		//	import flash.events.StatusEvent;
			
			public var monitorConnection:ObjectProxy = new ObjectProxy(Application.application.currentCTObj.monitorConnection);
			public var clientInstance:ObjectProxy = new ObjectProxy(Application.application.currentCTObj);
			public var myStyles:StyleSheet;	
			
			private function init():void {
				monitorConnection.attachView(this);	
				
				myStyles = new StyleSheet();
				myStyles.setStyle("time", {fontFamily:'Arial,Helvetica,sans-serif', textDecoration:'underline', fontSize:'10px', fontWeight:'bold', color:'#000000'});
				myStyles.setStyle("error", {fontFamily:'Arial,Helvetica,sans-serif', fontSize:'12px', color:'#FF0000'});
				monitorOutput_ta.styleSheet = myStyles;
				monitorOutput_ta.htmlText = monitorConnection.getOutput();
				design_cmb.dataProvider = Application.application.serverInstance.getClientDesigns().toArray();
				//set cmb box display
				for (var t1:int=0;t1<design_cmb.dataProvider.length;t1++) {
					var tempS:String = clientInstance.designName;
					if (design_cmb.dataProvider[t1].data == tempS) {
						design_cmb.selectedIndex = t1;
					}
				}
								
			//	socketMonitor = new SocketMonitor('www.adobe.com',80);
				//socketMonitor.addEventListener(StatusEvent.STATUS, socketStatusChange);
				//socketMonitor.start();
			}
				
			public function clientsCMBX(event:Event) {
				var temp:Object = ComboBox(event.target).selectedItem;
				if (temp !=null) {
					clientInstance.designName=temp.data;
				};
				trace("click cmb"+event.toString());
			}
			
			private function deploy() {
				trace("deploy files");
			}
			
			[Embed (source="../bin/lib/icons/led-red.png")]
			public var redLight:Class;
			
			[Embed (source="../bin/lib/icons/led-green.png")]
			public var greenLight:Class;
			
			private function startServer():void{
				monitorConnection.startServer();
			}
			private function stopServer():void{
				monitorConnection.stopServer();
			}
			private function restartClient():void{
				monitorConnection.restartClient();
			}
			private function syncTime():void{
				monitorConnection.setTime();
			}
			private function commit():void{
				monitorConnection.commit();
			}
			private function shutdown():void{
				monitorConnection.shutdown();
			}
			private function monitorConnect():void{
				try {
					monitorConnection.connect(clientIP.text,10002);
				} catch (error:IOErrorEvent) {
					serverStatus = false;
					monitorConnection.appendOutput("Monitor: Connection Failed at "+ipAddress);
				}
			}
			private function monitorDisconnect():void{
				monitorConnection.disconnect();
			}
									
			public function needRefresh():void{
				trace("needRefresh in server controls");
			}
			public function notifyChange():void{
				monitorOutput_ta.htmlText = monitorConnection.getOutput();
				
				var tempMonitorStatus = monitorConnection.getStatus();
				
				if(tempMonitorStatus){
					monitorLight.source = greenLight;
					trace("======on");
					//monitorStatus_mc = this.attachMovie("on","monitorStatus_mc",2);
				} else{
					monitorLight.source = redLight;
					trace("======off");
					//monitorStatus_mc = this.attachMovie("off","monitorStatus_mc",2);
				}
			}	
		]]>
	</mx:Script>
	
	
	
</mx:Canvas>

	